
 ╒════════════════════════════════════════════════════════════════╕
  Prefetch                                                       

    Fetch and cache resources that may be requested some time soon 
 ╘════════════════════════════════════════════════════════════════╛


Prefetch (<link rel="prefetch">) is a browser optimization which allows us to fetch resources that 
  may be needed for subsequent routes or pages before they are needed. Prefetching can be achieved in a few 
  ways. It can be done declaratively in HTML (such as in the example below), via a HTTP Header 
  (Link: </js/chat-widget.js>; rel=prefetch), Service Workers or via more custom means such as through Webpack.


In many cases, we know that users will request certain resources soon after the initial render of a page.
  Although they may not visible instantly, thus shouldn't be included in the initial bundle, it would be 
  great to reduce the loading time as much as possible to give a better user experience!


We can let Webpack know that certain bundles need to be prefetched, by adding a magic 
comment to the import statement:        /* webpackPrefetch: true */.


Modules that are prefetched are requested and loaded by the browser
  even before the user requested the resource. When the browser is idle and
  calculates that it's got enough bandwidth, it will make a request in order to
  load the resource, and cache it. Having the resource cached can reduce the
  loading time signi cantly, as we don't have to wait for the request to nish
  after the user has clicked the button. It can simply get the loaded resource from cache.

