
 ╒═════════════════════════════════════════════════╕

  Tree Shaking                                    

    Reduce the bundle size by eliminating dead code 

 ╘═════════════════════════════════════════════════╛

It can happen that we add code to our bundle that isn't used anywhere in our application. This 
  piece of dead code can be eliminated in order to reduce the size of the bundle, and prevent unnecessarily 
  loading more data! The process of eliminating dead code before adding it to our bundle, is called tree-shaking

Consider your application and its dependencies as an abstract syntax tree 
  (we want to "shake" the syntax tree to optimize it). Each node in the tree is a dependency that gives your 
  app functionality. In Tree shaking, input les are treated as a graph. Each node in the graph is a top level 
  statement which is called a "part" in the code. Tree shaking is a graph traversal which starts from
  the entry point and marks any traversed paths for inclusion.

Every component can declare symbols, reference symbols, and rely on other files. Even the "parts" 
  are marked as having side effects or not. For example, the statement let firstName = 'Jane' has 
  no side effects because the statement can be removed without any observed difference if nothing needs
  foo. But the statement let firstName = getName() has side effects, because the call to getName() can 
  not be removed without changing the meaning of the code, even if nothing needs firstName.


Imports
  Only modules de ned with the ES2015 module syntax (import and export) can
  be tree-shaken. The way you import modules speci es whether the module
  can be tree-shaken or not.

Tree shaking starts by visiting all parts of the entry point le with side effects,
  and proceeds to traverse the edges of the graph until new sections are
  reached. Once the traversal is completed, the JavaScript bundle includes only
  the parts that were reached during the traversal. The other pieces are left out.


Side Efects
  When we're importing an ES6 module, this module gets executed instantly. It could happen that although 
  we're not referencing the module's exports anywhere in our code, the module itself affects the global 
  scope while it's being executed (poly lls or global stylesheets, for example). This is called a side 
  effect. Although we're not referencing the exports of the module itself, if the module has exported values 
  to begin with, the module cannot be tree-shaken due to the special behavior when it's being imported!



