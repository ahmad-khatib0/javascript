

 ╒══════════════════════════════════════════════════════════════------╕
   Islands Architecture                                         
      
      The islands architecture encourages small, focused chunks of 
      
      interactivity within server-rendered web pages•              
 ╘══════════════════════════════════════════════════════════════------╛


The core principle for SSR is that HTML is rendered on the server and
  shipped with necessary JavaScript to rehydrate it on the client. Rehydration is the process of 
  regenerating the state of UI components on the client-side after the server renders it. Since 
  rehydration comes at a cost, each variation of SSR tries to optimize the rehydration process. 
  This is mainly achieved by partial hydration of critical components or streaming of components as they
  get rendered. However, the net JavaScript shipped eventually in the above techniques remains the same


The term Islands architecture was popularized by Katie Sylor-Miller and Jason
  Miller to describe a paradigm that aims to reduce the volume of JavaScript shipped through "islands" 
  of interactivity that can be independent delivered on top of otherwise static HTML. Islands are a 
  component-based architecture that suggests a compartmentalized view of the page with static and dynamic
  islands. The static regions of the page are pure non-interactive HTML and do not need hydration. The dynamic 
  regions are a combination of HTML and scripts capable of rehydrating themselves after rendering.


The Islands architecture facilitates server-side rendering of pages with all of
  their static content. However, in this case, the rendered HTML will include
  placeholders for dynamic content. The dynamic content placeholders contain
  self-contained component widgets. Each widget is similar to an app and
  combines server-rendered output and JavaScript used to hydrate the app on the client.


Each component has its hydration script in the Islands architecture that
    executes asynchronously, independent of any other script on the page. A
    performance issue in one component should not affect the other.


Pros and Cons
  The Islands architecture combines ideas from different rendering techniques
  such as server-side rendering, static site generation, and partial hydration.
  Some of the potential bene ts of implementing islands are as follows:
  
• Performance: Reduces the amount of JavaScript code shipped to the client. The code sent only consists 
  of the script required for interactive components, which is much less than the script needed to recreate 
  the virtual DOM for the entire page and rehydrate all the elements on the page. The smaller size of 
  JavaScript automatically corresponds to faster page loads and Time to Interactive (TTI).
  
• SEO: Since all of the static content is rendered on the server; pages are SEO friendly.

• Prioritizes important content: Key content (especially for blogs, news articles, and product pages) 
  is available almost immediately to the user. Secondary functionality for interactivity is usually 
  required after consuming the key content becomes available gradually.
  
• Accessibility: The use of standard static HTML links to access other
  pages helps to improve the accessibility of the website.

• Component-based: The architecture offers all advantages of
  component-based architecture, such as reusability and maintainability.

Despite the advantages, the concept is still in a nascent stage. The limited support results in some disadvantages.

• The only options available to developers to implement Islands are to use one of the few frameworks available 
  or develop the architecture yourself. Migrating existing sites to Astro or Marko would require additional efforts.

• New frameworks claim to support the Islands architecture making it difcult to alter 
  the ones which will work for you.
  
• The architecture is not suitable for highly interactive pages like social
  media apps which would probably require thousands of islands.


  
