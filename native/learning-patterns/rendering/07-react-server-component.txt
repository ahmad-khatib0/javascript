

 ╒════════════════════════════════════════════════════════════════╕
 
   React Server Components                                        
   
     Server Components compliment SSR, rendering to an intermediate 
     abstraction without needing to add to the JavaScript bundle    

 ╘════════════════════════════════════════════════════════════════╛


Server Components
  React's new Server Components compliment Server-side rendering, enabling rendering into an intermediate 
  abstraction format without needing to add to the JavaScript bundle. This both allows merging the 
  server-tree with the client-side tree without a loss of state and enables scaling up to more components.


Some of the challenges with code-splitting are:
• Outside of a meta-framework (like Next.js), you often have to tackle this
   optimization manually, replacing import statements with dynamic imports.
• It might delay when the application begins loading the component impacting the user-experience.


Server Components introduce automatic code-splitting treating all normal
  imports in Client components as possible code-split points. They also allow
  developers to select which component to use much earlier (on the server),
  allowing the client to fetch it earlier in the rendering process.


To summarize
• Code for Server Components is never delivered to the client. In many
    implementations of SSR using React, component code gets sent to the
    client via JavaScript bundles anyway. This can delay interactivity.

• Server components enable access to the back-end from anywhere in the tree. When using Next.js,
    you're used to accessing the back-end via getServerProps() which has the limitation of only 
    working at the top-level page. Random npm components are unable to do this.

• Server Components may be refetched while maintaining Client-side state inside of the tree. 
    This is because the main transport mechanism is much richer than just HTML, allowing the refetching 
    of a server-rendered part (e.g such as a search result list) without blowing 
    away state inside (e.g search input text, focus, text selection)
