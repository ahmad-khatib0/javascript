
 ╒══════════════════════════════════════════════════════════════════════════════╕

  Static Rendering                                                             
    Deliver pre-rendered HTML content that was generated when the site was built 

 └──────────────────────────────────────────────────────────────────────────────┘
 
 
Static rendering or static generation (SSG) attempts to resolve SSR issues by delivering 
  pre-rendered HTML content to the client that was generated when the site was built.

As a result, SSG helps to achieve a faster FCP/TTI

As the name suggests, static rendering is ideal for static content, where the page need not be 
  customized based on the logged-in user (e.g personalized recommendations). Thus static pages like 
  the ‘About us', ‘Contact us', Blog pages for websites or product pages for e-commerce apps, are ideal
  candidates for static rendering.


Key Considerations
  While performance and SEO make SSG a great rendering pattern, the following factors need to be 
  considered when assessing the suitability of SSG for speci c applications
  
  1. A large number of HTML files: Individual HTML files need to be generated 
     for every possible route that the user may access.
       
  2. Hosting Dependency: For an SSG site to be super-fast and respond quickly, the hosting platform used 
     to store and serve the HTML les should also be good. Superlative performance is possible if a 
     well-tuned SSG website is hosted right on multiple CDNs to take advantage of edge-caching.
     
  3. Dynamic Content: An SSG site needs to be built and re-deployed every
     time the content changes. The content displayed may be stale if the site has not been 
     built + deployed after any content change. This makes SSG unsuitable for highly dynamic content.

     
