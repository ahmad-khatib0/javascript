

Progressive Hydration
  Delay loading JavaScript for less important parts of the page


Although server rendering provides a faster First Contentful Paint, it doesn't always provide a 
  faster Time To Interactive. The necessary JavaScript in order to be able to interact with our 
  website hasn't been loaded yet. Buttons may look interactive, but they aren't interactive (yet).
  The handlers will only get attached once the JavaScript bundle has been loaded and processed. This 
  process is called hydration: React checks the current DOM nodes, 
  and hydrates the nodes with the corresponding JavaScript.


The time that the user sees non-interactive UI on the screen is also refered to
  as the uncanny valley: although users may think that they can interact with the
  website, there are no handlers attached to the components yet. This can be a
  frustrating experience for the user, as the UI may can like it's frozen!


It can take a while before the DOM components that were received from the server are 
  fully hydrated. Before the components can be hydrated, the JavaScript file needs to be loaded,
  processed, and executed. Instead of hydrating the entire application at once, we can also 
  progressively hydrate the DOM nodes. Progressive hydration makes it possible to individually 
  hydrate nodes over time, which makes it possible to only request the minimum necessary JavaScript.


By progressively hydrating the application, we can delay the hydration of less important parts of 
  the page. This way, we can reduce the amount of JavaScript we have to request in order to make 
  the page interactive and only hydrate the nodes once the user needs it. Progressive hydration also
  helps avoid the most common SSR Rehydration pitfalls where a server-rendered DOM tree gets 
  destroyed and then immediately rebuilt.

  Progressive hydration allows us to only hydrate components based on a
  certain condition, for example when a component is visible in the viewport.


Hydration allows client-side React to recognize the ReactDOM components that are rendered on the
  server and attach events to these components. Thus, it introduces continuity and seamlessness 
  for an SSR app to function like a CSR app once it is available on the client.


For all components on the page to become interactive via hydration, the React code for these 
  components should be included in the bundle that gets downloaded to the client. Highly interactive 
  SPAs that are largely controlled by JavaScript would need the entire bundle at once. However, 
  mostly static websites with a few interactive elements on the screen, may not need all components 
  to be active immediately. For such websites sending a huge React bundle for each component on the 
  screen becomes an overhead. Progressive Hydration solves this problem by allowing us to hydrate only certain 
  parts of the application when the page loads. The other parts are hydrated progressively as required.


The idea behind progressive hydration is to provide a great performance by
  activating your app in chunks. Any progressive hydration solution should also
  take into account how it will impact the overall user experience. You cannot
  have chunks of screen popping up one after the other but blocking any activity
  or user input on the chunks that have already loaded. Thus, the requirements
  for a holistic progressive hydration implementation are as follows:
  • Allows usage of SSR for all components.
  • Supports splitting of code into individual components or chunks.
  • Supports client side hydration of these chunks in a developer de ned sequence.
  • Does not block user input on chunks that are already hydrated.
  • Allows usage of some sort of a loading indicator for chunks with deferred hydration.


Concurrent mode can be used to implement progressive hydration. In this case, hydration of each 
  of the chunks on the page, becomes a task for React concurrent mode. If a task of higher priority 
  like user input needs to be performed, React will pause the hydration task and switch to accepting the
  user input. Features like lazy(), Suspense() allow you to use declarative loading states. 
  These can be used to show the loading indicator while chunks are being lazy loaded. 
  SuspenseList() can be used to de ne the priority for lazy loading components.


React concurrent mode can also be combined with another React feature
  Server Components. This will allow you to refetch components from the
  server and render them on the client as they stream in instead of waiting for
  the whole fetch to nish. Thus, the client's CPU is put to work even as we wait
  for the network fetch to nish.


Pros and Cons

Progressive hydration provides server-side rendering with client-side hydration while also minimizing 
  the cost of hydration. Following are some of the advantages that can be gained from this.
  
1. Promotes code-splitting: Code-splitting is an integral part of progressive hydration because 
   chunks of code need to be created for individual components that are lazy-loaded.
   
2. Allows on-demand loading for infrequently used parts of the
   page: There may be components of the page that are mostly static, out of the viewport and/or not required very 
   often. Such components are ideal candidates for lazy loading. Hydration code for these components need not be
   sent when the page loads. Instead, they may be hydrated based on a trigger.
   
3. Reduces bundle size: Code-splitting automatically results in a reduction of
   bundle size. Less code to execute on load helps reduce the time between FCP and TTI.

On the downside, progressive hydration may not be suitable for dynamic apps where every element on 
   the screen is available to the user and needs to be made interactive on load. This is because, 
   if developers do not know where the user is likely to click rst, they may not be able to 
   identify which components to hydrate rst.
