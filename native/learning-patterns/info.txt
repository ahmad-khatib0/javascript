j- Higher-order components (HOC): 
    are an advanced technique in React for reusing component logic. Meaning a 
    higher-order component is a function that takes a component and returns a new component
  
-- Context
    In a typical React app, data is passed down via props, but this can be cumbersome for some 
    types of props that are required by many components within an application. Context provides 
    a way to share these types of data between components without having to explicitly pass a 
    prop through every level of hierarchy. Meaning with context, we can avoid passing props 
    through intermediate elements.




-- Singleton Pattern    :  Share a single global instance throughout our application

-- Proxy Pattern        :  Share a single global instance throughout our application

-- Provider Pattern     :  Make data available to multiple child components

-- Prototype Pattern    :  Share properties among many objects of the same type

-- Container/ Presentational Pattern: 
   Enforce separation of concerns by separating the view from the application logic

-- Observer Pattern     :  Use observables to notify subscribers when an event occurs

-- Module Pattern       :  Split up your code into smaller, reusable pieces

-- Mixin Pattern        :  Add functionality to objects or classes without inheritance

-- Mediator/ Middleware Pattern    : 
   Use a central mediator object to handle communication between components

-- Render Props Pattern :  Pass JSX elements to components through props 

-- Hooks Pattern        :  Use functions to reuse stateful logic among multiple components throughout the app

-- HOC Pattern          :  Pass reusable logic down as props to components throughout your application


