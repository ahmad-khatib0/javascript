
┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
│ // make all Socket instances join the "room1" room                                                         │
│ io.socketsJoin("room1");                                                                                   │
│                                                                                                            │
│ // make all Socket instances in the "room1" room join the "room2" and "room3" rooms                        │
│ io.in("room1").socketsJoin(["room2", "room3"]);                                                            │
│                                                                                                            │
│ // make all Socket instances in the "room1" room of the "admin" namespace join the "room2" room            │
│ io.of("/admin").in("room1").socketsJoin("room2");                                                          │
│                                                                                                            │
│ // this also works with a single socket ID                                                                 │
│ io.in(theSocketId).socketsJoin("room1");                                                                   │
┕━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┙

 ╭──────────────────────────────────────────────────────────────────────────────────────────────────╮
 │ // make all Socket instances leave the "room1" room                                              │
 │ io.socketsLeave("room1");                                                                        │
 │                                                                                                  │
 │ // make all Socket instances in the "room1" room leave the "room2" and "room3" rooms             │
 │ io.in("room1").socketsLeave(["room2", "room3"]);                                                 │
 │                                                                                                  │
 │ // make all Socket instances in the "room1" room of the "admin" namespace leave the "room2" room │
 │ io.of("/admin").in("room1").socketsLeave("room2");                                               │
 │                                                                                                  │
 │ // this also works with a single socket ID                                                       │
 │ io.in(theSocketId).socketsLeave("room1");                                                        │
 ╰──────────────────────────────────────────────────────────────────────────────────────────────────╯

 ╭────────────────────────────────────────────────────────────────────────────────────────────────────╮
 │ // make all Socket instances disconnect                                                            │
 │ io.disconnectSockets();                                                                            │
 │                                                                                                    │
 │ // make all Socket instances in the "room1" room disconnect (and discard the low-level connection) │
 │ io.in("room1").disconnectSockets(true);                                                            │
 │                                                                                                    │
 │ // make all Socket instances in the "room1" room of the "admin" namespace disconnect               │
 │ io.of("/admin").in("room1").disconnectSockets();                                                   │
 │                                                                                                    │
 │ // this also works with a single socket ID                                                         │
 │ io.of("/admin").in(theSocketId).disconnectSockets();                                               │
 ╰────────────────────────────────────────────────────────────────────────────────────────────────────╯



io.on("connection", (socket) => {
  
  // basic emit back to sender
  socket.emit(/* ... */);

  // to all clients in the current namespace except the sender
  socket.broadcast.emit(/* ... */);

  // to all clients in room1 except the sender
  socket.to("room1").emit(/* ... */);

  // to all clients in room1 and/or room2 except the sender
  socket.to(["room1", "room2"]).emit(/* ... */);

  // to all clients in room1
  io.in("room1").emit(/* ... */);

  // to all clients in room1 and/or room2 except those in room3
  io.to(["room1", "room2"]).except("room3").emit(/* ... */);

  // to all clients in namespace "myNamespace"
  io.of("myNamespace").emit(/* ... */);

  // to all clients in room1 in namespace "myNamespace"
  io.of("myNamespace").to("room1").emit(/* ... */);

  // to individual socketid (private message)
  io.to(socketId).emit(/* ... */);

  // to all clients on this node (when using multiple nodes)
  io.local.emit(/* ... */);

  // to all connected clients
  io.emit(/* ... */);

  // to all clients, with one acknowledgement per client
  io.timeout(5000).emit("hello", "world", (err, responses) => {
    if (err) {
      // some clients did not acknowledge the event in the given delay
    } else {
      console.log(responses); // one response per client
    }
  });

  // WARNING: `socket.to(socket.id).emit()` will NOT work, as it will send to everyone in the room
  // named `socket.id` but the sender. Please use the classic `socket.emit()` instead.

  // with acknowledgement
  socket.emit("question", (answer) => {
    // ...
  });

  // without compression
  socket.compress(false).emit(/* ... */);

  // a message that might be dropped if the low-level transport is not writable
  socket.volatile.emit(/* ... */);

  // with timeout
  socket.timeout(5000).emit("my-event", (err) => {
    if (err) {
      // the other side did not acknowledge the event in the given delay
    }
  });
});


 +---------------------------------------------------------------------------------+
 | ******************************************************************************* |
 | ********************************* Client Side ********************************* |
 | ******************************************************************************* |
 +---------------------------------------------------------------------------------+

 // basic emit
socket.emit(/* ... */);

// with acknowledgement
socket.emit("question", (answer) => { // ... });

// without compression
socket.compress(false).emit(/* ... */);

// a message that might be dropped if the low-level transport is not writable
socket.volatile.emit(/* ... */);

// with timeout
socket.timeout(5000).emit("my-event", (err) => {
  if (err) {
    // the other side did not acknowledge the event in the given delay
  }
});
